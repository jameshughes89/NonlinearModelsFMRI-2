from math import *

def funcL_RELATIONAL_100307(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.59758926162e-13 * 1 + 0.0 * v0 + 0.131467586805 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0 * v7 + 0.216625992023 * v8 + 0.199118762008 * v15 + 0.0 * v16 + 0.324396845293 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v23 + 0.0105781264867 * v27 + 0.0427142600697 * v28
def funcL_RELATIONAL_100408(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.24871503608e-13 * 1 + 0.0366910065363 * v1 + 0.0 * v4 + 0.0 * v5 + 0.0 * v7 + 0.0 * v8 + 0.0 * v12 + 0.206499096522 * v13 + 0.390150093483 * v15 + 0.147664091098 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v23 + 0.179657476102 * v27 + 0.0 * v28
def funcL_RELATIONAL_101006(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 6.19068374612e-14 * 1 + -0.0 * v0 + 0.13723190083 * v1 + -0.0 * v4 + 0.0 * v7 + 0.0 * v8 + 0.0 * v11 + 0.0 * v13 + 0.0 * v15 + -0.0 * v16 + 0.342008569913 * v17 + 0.213278087425 * v18 + 0.160381190933 * v21 + 0.0 * v24 + 0.0 * v27 + -0.0 * v28
def funcL_RELATIONAL_101107(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.61050117827e-14 * 1 + 0.0470101554014 * v1 + 0.0 * v3 + 0.0 * v4 + 0.0 * v7 + 0.0 * v11 + 0.0 * v12 + 0.32169649217 * v13 + 0.0 * v15 + 0.203230388343 * v17 + 0.0 * v19 + 0.0992045630406 * v21 + 0.0 * v22 + 0.0 * v24 + 0.0 * v26 + 0.22975843361 * v27
def funcL_RELATIONAL_101309(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.19780674387e-13 * 1 + 0.127652657546 * v1 + 0.0 * v2 + 0.0 * v4 + 0.169600489024 * v6 + -0.0 * v7 + 0.283098687102 * v8 + 0.187163026669 * v11 + 0.188773773216 * v12 + 0.0 * v15 + 0.0 * v17 + 0.0 * v18 + -0.0 * v20 + 0.0 * v21 + 0.0 * v25 + 0.0 * v27
def funcL_RELATIONAL_101410(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.61141394587e-13 * 1 + 0.0 * v1 + 0.0249236854016 * v3 + 0.112547347748 * v4 + 0.0 * v8 + 0.0 * v9 + 0.0 * v12 + 0.0875635616625 * v13 + 0.304320742307 * v15 + 0.356805379119 * v17 + -0.0 * v20 + -0.0 * v21 + 0.0 * v22 + -0.0 * v23 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_101915(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.81851666345e-13 * 1 + 0.0 * v0 + 0.0 * v1 + 0.0 * v2 + 0.0 * v4 + 0.047917530231 * v8 + 0.0 * v10 + 0.0 * v12 + 0.35806905995 * v13 + 0.283353042528 * v15 + 0.296995989749 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_102008(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -6.13958242366e-14 * 1 + 0.0 * v2 + 0.0 * v3 + 0.0 * v5 + 0.148599586862 * v6 + 0.0 * v8 + 0.0 * v11 + 0.0 * v12 + 0.202858237408 * v13 + 0.0 * v15 + 0.0 * v16 + 0.501975925276 * v17 + 0.0 * v18 + 0.0 * v21 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_102311(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 2.6936437873e-14 * 1 + 0.02275030041 * v1 + 0.0 * v2 + 0.0633641961137 * v4 + 0.0 * v5 + 0.271081084301 * v6 + 0.0 * v7 + 0.337243972781 * v8 + 0.0 * v9 + 0.0 * v12 + 0.0468116043285 * v13 + 0.0 * v18 + 0.0 * v21 + 0.0 * v23 + 0.0 * v25 + 0.20330158517 * v27
def funcL_RELATIONAL_102816(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -3.00938255377e-14 * 1 + 0.634038143101 * v1 + 0.0 * v2 + 0.0467561130527 * v4 + 0.0448094628104 * v6 + 0.0 * v7 + 0.0 * v8 + 0.0 * v9 + 0.0179717455849 * v11 + 0.0 * v12 + 0.0 * v14 + 0.0 * v18 + 0.0 * v23 + 0.0 * v25 + 0.0 * v26 + 0.138578473761 * v27
def funcL_RELATIONAL_103111(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -6.94097399941e-14 * 1 + 0.0725475252654 * v1 + 0.0 * v4 + 0.0 * v5 + 0.0 * v7 + 0.0 * v8 + 0.0 * v11 + 0.0 * v13 + 0.380429902793 * v15 + 0.242330133186 * v17 + 0.0 * v20 + 0.0 * v21 + 0.0 * v22 + 0.235455952601 * v26 + 0.0 * v27 + -0.0 * v28
def funcL_RELATIONAL_103414(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 3.43972231428e-14 * 1 + 0.170683196149 * v1 + 0.163554269282 * v4 + 0.0990055959209 * v6 + 0.255832283064 * v8 + 0.00206955877326 * v9 + 0.0 * v11 + 0.0 * v12 + 0.0 * v13 + 0.0771859313333 * v15 + 0.0 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0196767747475 * v21 + 0.0 * v22 + 0.1558631235 * v27
def funcL_RELATIONAL_103515(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -5.4567800446e-14 * 1 + 0.108479154134 * v1 + 0.0 * v4 + 0.0 * v5 + 0.0 * v6 + 0.0 * v7 + 0.106937645395 * v8 + 0.126178049502 * v11 + 0.0455164038087 * v13 + 0.228062399853 * v15 + 0.178696138673 * v17 + 0.0 * v20 + 0.0 * v21 + 0.0264485851717 * v26 + 0.153608619006 * v27 + 0.0 * v28
def funcL_RELATIONAL_103818(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -8.74444564344e-15 * 1 + 0.0 * v0 + 0.0400069288228 * v1 + 0.0 * v4 + 0.0150181470345 * v6 + 0.0 * v7 + 0.0 * v8 + 0.0 * v11 + 0.444541835591 * v15 + 0.0187430180341 * v17 + 0.0600022355159 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v22 + 0.342894885198 * v27 + 0.0 * v28
def funcL_RELATIONAL_104012(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.69963069385e-13 * 1 + 0.0 * v0 + 0.0336095359674 * v4 + 0.0 * v5 + 0.212106374613 * v8 + 0.0901163017963 * v9 + 0.0 * v12 + 0.143582819148 * v13 + 0.038928025802 * v15 + 0.0426312792853 * v16 + 0.13644498423 * v20 + 0.06961871848 * v22 + 0.0 * v23 + 0.0 * v24 + 0.165253198144 * v27 + 0.0232688445404 * v28
def funcL_RELATIONAL_104820(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.52738917588e-13 * 1 + 0.219499114724 * v1 + 0.0 * v2 + 0.0 * v4 + 0.154433007031 * v5 + 0.0 * v8 + 0.0 * v9 + -0.0 * v12 + 0.0 * v13 + 0.0 * v15 + 0.398809565947 * v17 + 0.0 * v20 + 0.13565170217 * v21 + -0.0 * v24 + 0.0 * v27 + -0.0 * v28
def funcL_RELATIONAL_105014(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 4.75295764664e-14 * 1 + 0.0 * v1 + -0.0 * v2 + 0.0 * v4 + -0.0 * v5 + 0.0 * v8 + -0.0 * v11 + 0.0 * v12 + 0.0824530819773 * v13 + 0.161030778075 * v15 + 0.41388918767 * v17 + -0.0 * v18 + -0.0 * v20 + -0.0 * v21 + 0.0 * v22 + 0.24322314325 * v27
def funcL_RELATIONAL_105115(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -7.17418497473e-14 * 1 + 0.0 * v3 + 0.0 * v4 + 0.0 * v5 + 0.0665617895786 * v7 + 0.0 * v8 + 0.11178039918 * v12 + 0.0287630250125 * v13 + 0.201997060891 * v15 + 0.138444220729 * v16 + 0.351556694348 * v17 + 0.00266966023263 * v20 + 0.0 * v21 + 0.0 * v22 + 0.0 * v23 + 0.0 * v28
def funcL_RELATIONAL_105216(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -3.48783156991e-14 * 1 + 0.0 * v1 + 0.0 * v2 + 0.044861000666 * v4 + 0.0 * v5 + 0.30853139312 * v6 + 0.237154211574 * v8 + 0.0 * v12 + 0.100410734371 * v13 + 0.0731818086283 * v15 + 0.0 * v16 + 0.106912958645 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v22 + 0.0646191501472 * v27
def funcL_RELATIONAL_105923(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 7.90054661991e-14 * 1 + 0.0 * v0 + 0.0 * v5 + 0.0 * v8 + 0.0 * v11 + 0.244031599642 * v12 + 0.101616986443 * v13 + 0.183092852142 * v15 + 0.0 * v16 + 0.0796492123892 * v17 + 0.122313678145 * v18 + 0.142018990739 * v20 + 0.0 * v21 + 0.0 * v24 + 0.0604859878283 * v27 + 0.0 * v28
def funcL_RELATIONAL_106016(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 4.07562648315e-14 * 1 + 0.0 * v3 + 0.162652366067 * v4 + 0.0 * v5 + 0.0 * v7 + 0.0 * v8 + 0.0 * v11 + 0.0 * v13 + 0.178076884738 * v15 + 0.168675215761 * v17 + 0.0403663779964 * v18 + 0.0 * v20 + 0.0 * v21 + 0.274158350788 * v25 + 0.0566855101903 * v27 + 0.0 * v28
def funcL_RELATIONAL_106319(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.06409427622e-13 * 1 + 0.322590984473 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0 * v6 + 0.0 * v7 + 0.0 * v8 + 0.0 * v9 + 0.0 * v13 + 0.348980484393 * v15 + 0.0768751476356 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v23 + 0.169972763584 * v27 + 0.0 * v28
def funcL_RELATIONAL_106521(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -3.10183670602e-14 * 1 + 0.0 * v1 + 0.0 * v4 + 0.0 * v5 + 0.00276633012053 * v6 + 0.0 * v7 + 0.335870089462 * v8 + 0.0 * v11 + 0.0114771914023 * v13 + 0.119929924266 * v15 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v25 + 0.32683734758 * v26 + 0.133834139845 * v27
def funcL_RELATIONAL_107321(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.84906197466e-13 * 1 + 0.0 * v0 + 0.0 * v1 + 0.0 * v3 + 0.0 * v4 + 0.0 * v8 + 0.0 * v10 + 0.0 * v12 + 0.0616599648573 * v13 + 0.19051515722 * v15 + 0.0 * v16 + 0.617885573315 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v22 + 0.0 * v28
def funcL_RELATIONAL_107422(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -4.94614421659e-14 * 1 + 0.0 * v0 + 0.0 * v1 + 0.0 * v4 + 0.258759456022 * v8 + 0.0 * v9 + 0.0 * v12 + 0.197208743941 * v13 + 0.376812895883 * v15 + 0.0 * v16 + 0.0 * v17 + -0.0 * v18 + -0.0 * v20 + -0.0 * v21 + -0.0 * v23 + 0.0 * v28
def funcL_RELATIONAL_108121(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -9.87299196149e-15 * 1 + 0.0800065086741 * v1 + 0.0 * v4 + 0.0 * v5 + 0.0093066475548 * v6 + 0.0 * v7 + 0.143303030393 * v8 + 0.0269982748486 * v13 + 0.0 * v15 + 0.463985102879 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v23 + 0.225094600819 * v27 + 0.0 * v28
def funcL_RELATIONAL_108323(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.64125884039e-13 * 1 + 0.246404278081 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0683870901358 * v5 + 0.000403430314997 * v7 + 0.0 * v8 + 0.0 * v9 + 0.0 * v11 + 0.185016698468 * v13 + 0.180553859289 * v17 + 0.0845514686412 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0655294848212 * v23 + 0.0919052029866 * v27
def funcL_RELATIONAL_108525(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 7.5895580602e-14 * 1 + 0.260816996268 * v1 + 0.0 * v4 + 0.0286001858357 * v5 + 0.0 * v6 + 0.0 * v8 + 0.0 * v9 + 0.116566512831 * v12 + 0.327609241539 * v13 + 0.0 * v17 + 0.0 * v20 + 0.0381244583804 * v21 + 0.0 * v22 + 0.106768924965 * v26 + 0.0619505420848 * v27 + 0.0 * v28
def funcL_RELATIONAL_108828(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -6.58209075162e-14 * 1 + 0.317333409899 * v1 + 0.00631857788701 * v4 + 0.0 * v5 + 0.0 * v6 + 0.0 * v8 + 0.0995233103989 * v9 + 0.0 * v11 + 0.229983272389 * v13 + 0.19529334165 * v15 + 0.0986672594116 * v17 + 0.0 * v20 + 0.0 * v21 + 0.0 * v22 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_109123(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 5.20405286404e-14 * 1 + 0.0 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0321123635654 * v6 + 0.0 * v8 + 0.0 * v9 + 0.0 * v11 + 0.0 * v13 + 0.0 * v15 + 0.0 * v16 + 0.555045660988 * v17 + 0.0 * v20 + 0.156776092654 * v26 + 0.167995049451 * v27 + 0.0 * v28
def funcL_RELATIONAL_109325(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.79820359739e-14 * 1 + 0.0 * v1 + 0.0 * v2 + 0.0 * v3 + 0.0 * v4 + 0.0 * v5 + 0.0252792413993 * v8 + 0.0 * v9 + 5.67713782155e-05 * v12 + 0.341266599266 * v13 + 0.280238854773 * v15 + 0.00909697938757 * v17 + 0.0 * v21 + 0.0 * v25 + 0.309940657412 * v26 + 0.0550600913497 * v27
def funcL_RELATIONAL_110411(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.18626268183e-13 * 1 + 0.0555861341653 * v0 + 0.162561688455 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0521391808014 * v5 + 0.0 * v8 + 0.0 * v12 + 0.110972987694 * v15 + 0.0642539775438 * v16 + 0.45134204029 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v23 + 0.0 * v27
def funcL_RELATIONAL_111312(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.46003383055e-13 * 1 + 0.0 * v3 + 0.0 * v4 + 0.0 * v5 + 0.0 * v8 + 0.0 * v11 + 0.0940680272188 * v12 + 0.0241787012722 * v13 + 0.343015486889 * v15 + 0.0 * v16 + 0.262865681571 * v17 + 0.0 * v19 + 0.0 * v20 + 0.0 * v22 + 0.158196622416 * v27 + 0.0 * v28
def funcL_RELATIONAL_111413(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 6.25352236874e-14 * 1 + 0.138286702796 * v1 + 0.0 * v4 + 0.0438543173532 * v5 + 0.210895237329 * v6 + 0.0 * v7 + 0.0 * v8 + -0.0 * v9 + -0.0 * v10 + 0.0 * v11 + 0.0197325328812 * v13 + 0.108047798364 * v14 + 0.207420353018 * v17 + 0.037714337872 * v25 + 0.0 * v26 + 0.229586165127 * v27
def funcL_RELATIONAL_111514(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.3766133613e-13 * 1 + 0.0468816475828 * v1 + 0.0 * v3 + 0.0 * v5 + 0.157692959807 * v7 + 0.112837902447 * v8 + 0.0 * v9 + 0.0 * v10 + 0.0 * v12 + 0.110294900344 * v15 + 0.0 * v16 + 0.101959733451 * v17 + 0.40876221662 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v28
def funcL_RELATIONAL_111716(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 2.33917040345e-13 * 1 + 0.253204318901 * v1 + 0.0 * v4 + 0.0 * v5 + 0.111678281777 * v7 + 0.0 * v8 + 0.0 * v9 + 0.0917390005749 * v13 + 0.440381360579 * v15 + -0.0 * v16 + 0.0 * v17 + 0.0 * v18 + 0.0 * v20 + 0.00573745590212 * v21 + 0.0 * v23 + 0.00327143715318 * v27
def funcL_RELATIONAL_113215(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -5.97650788006e-14 * 1 + 0.0 * v1 + -0.0 * v4 + 0.0 * v5 + 0.18845276057 * v7 + 0.0 * v8 + 0.0 * v9 + 0.222955327484 * v13 + 0.0 * v15 + 0.224343919583 * v17 + 0.0 * v18 + 0.0 * v19 + 0.0 * v20 + -0.0 * v22 + 0.0 * v25 + 0.226571730992 * v27
def funcL_RELATIONAL_113619(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.66353280123e-13 * 1 + 0.0 * v0 + 0.12263518315 * v1 + -0.0 * v5 + 0.20830338186 * v6 + 0.0 * v7 + 0.0 * v9 + 0.189435590091 * v13 + 0.240684178174 * v15 + -0.0 * v17 + 0.0 * v18 + -0.0 * v20 + 0.0 * v21 + -0.0 * v23 + 0.0 * v24 + 0.0 * v27
def funcL_RELATIONAL_113922(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.35246465212e-14 * 1 + 0.0 * v0 + 0.0572545764192 * v1 + 0.0 * v3 + 0.202150321692 * v6 + 0.0 * v7 + 0.0 * v8 + 0.0230772035651 * v9 + 0.0939531771361 * v12 + 0.498510083228 * v15 + 0.0 * v16 + 0.04222348945 * v17 + 0.0 * v18 + 0.0 * v21 + 0.0 * v23 + 0.0 * v24
def funcL_RELATIONAL_114419(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.20200642492e-14 * 1 + 0.0 * v0 + 0.0 * v1 + 0.0 * v2 + 0.0 * v3 + 0.0 * v4 + 0.0 * v8 + 0.0122604948041 * v12 + 0.0 * v13 + 0.152720085328 * v15 + 0.391828622052 * v17 + 0.0 * v18 + 0.0 * v23 + 0.0 * v24 + 0.300808292406 * v27 + 0.0 * v28

funcs = [funcL_RELATIONAL_100307,funcL_RELATIONAL_100408,funcL_RELATIONAL_101006,funcL_RELATIONAL_101107,funcL_RELATIONAL_101309,funcL_RELATIONAL_101410,funcL_RELATIONAL_101915,funcL_RELATIONAL_102008,funcL_RELATIONAL_102311,funcL_RELATIONAL_102816,funcL_RELATIONAL_103111,funcL_RELATIONAL_103414,funcL_RELATIONAL_103515,funcL_RELATIONAL_103818,funcL_RELATIONAL_104012,funcL_RELATIONAL_104820,funcL_RELATIONAL_105014,funcL_RELATIONAL_105115,funcL_RELATIONAL_105216,funcL_RELATIONAL_105923,funcL_RELATIONAL_106016,funcL_RELATIONAL_106319,funcL_RELATIONAL_106521,funcL_RELATIONAL_107321,funcL_RELATIONAL_107422,funcL_RELATIONAL_108121,funcL_RELATIONAL_108323,funcL_RELATIONAL_108525,funcL_RELATIONAL_108828,funcL_RELATIONAL_109123,funcL_RELATIONAL_109325,funcL_RELATIONAL_110411,funcL_RELATIONAL_111312,funcL_RELATIONAL_111413,funcL_RELATIONAL_111514,funcL_RELATIONAL_111716,funcL_RELATIONAL_113215,funcL_RELATIONAL_113619,funcL_RELATIONAL_113922,funcL_RELATIONAL_114419,]

def getFuncs(): return funcs
