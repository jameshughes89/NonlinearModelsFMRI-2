from math import *

def funcL_RELATIONAL_100307(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.65494227982e-13 * 1 + 0.0 * v0 + 0.132771736595 * v1 + 0.0 * v4 + 0.217546849065 * v8 + 0.193136382658 * v15 + 0.332462146605 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v23 + 0.0454634090618 * v28
def funcL_RELATIONAL_100408(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.24870715809e-13 * 1 + 0.0366898686214 * v1 + 0.0 * v5 + 0.0 * v8 + 0.0 * v12 + 0.206496222855 * v13 + 0.390149871566 * v15 + 0.147663772077 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.1796604027 * v27
def funcL_RELATIONAL_101006(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 6.19068374612e-14 * 1 + -0.0 * v0 + 0.13723190083 * v1 + 0.0 * v8 + 0.0 * v13 + 0.0 * v15 + -0.0 * v16 + 0.342008569913 * v17 + 0.213278087425 * v18 + 0.160381190933 * v21 + 0.0 * v24 + -0.0 * v28
def funcL_RELATIONAL_101107(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.61028477502e-14 * 1 + 0.0470102210422 * v1 + 0.0 * v3 + 0.0 * v4 + 0.0 * v7 + 0.321682845887 * v13 + 0.0 * v15 + 0.203217744443 * v17 + 0.0 * v19 + 0.0992130166693 * v21 + 0.0 * v22 + 0.229775958096 * v27
def funcL_RELATIONAL_101309(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.60319628481e-13 * 1 + 0.258550195367 * v1 + 0.0 * v2 + 0.0 * v4 + 0.171027614105 * v8 + 0.208606700029 * v11 + 0.214925057476 * v12 + 0.0 * v15 + 0.0 * v17 + 0.0 * v18 + 0.0251793489888 * v25 + 0.0 * v27
def funcL_RELATIONAL_101410(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.6113921074e-13 * 1 + 0.0249243942745 * v3 + 0.112546198463 * v4 + 0.0 * v8 + 0.0 * v9 + 0.0 * v12 + 0.0875624929542 * v13 + 0.304315636007 * v15 + 0.356810308365 * v17 + -0.0 * v23 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_101915(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.81851251006e-13 * 1 + 0.0 * v0 + 0.0 * v1 + 0.0 * v4 + 0.0478824506345 * v8 + 0.0 * v12 + 0.358098425306 * v13 + 0.283426707427 * v15 + 0.296951846241 * v17 + 0.0 * v20 + 0.0 * v21 + 0.0 * v28
def funcL_RELATIONAL_102008(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -6.13998389185e-14 * 1 + 0.148613695397 * v6 + 0.0 * v11 + 0.0 * v12 + 0.202862609443 * v13 + 0.0 * v15 + 0.0 * v16 + 0.501965364242 * v17 + 0.0 * v18 + 0.0 * v21 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_102311(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 2.6931505129e-14 * 1 + 0.0227350250496 * v1 + 0.0633486288092 * v4 + 0.0 * v5 + 0.271077340829 * v6 + 0.0 * v7 + 0.337251799081 * v8 + 0.0 * v9 + 0.0468154570184 * v13 + 0.0 * v18 + 0.0 * v23 + 0.203320076731 * v27
def funcL_RELATIONAL_102816(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.9018994178e-14 * 1 + 0.662973305479 * v1 + 0.0 * v2 + 0.0483898954763 * v4 + 0.0317564770375 * v6 + 0.0 * v7 + 0.0 * v8 + 0.0 * v9 + 0.0 * v12 + 0.0 * v14 + 0.0 * v26 + 0.134753116957 * v27
def funcL_RELATIONAL_103111(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -7.53311877958e-14 * 1 + 0.122516135492 * v1 + 0.0 * v4 + 0.0 * v5 + 0.0 * v7 + 0.0 * v8 + 0.0 * v13 + 0.201157090911 * v15 + 0.356433642505 * v17 + 0.0 * v20 + 0.0403247898203 * v21 + 0.117233352719 * v27
def funcL_RELATIONAL_103414(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 3.41127171801e-14 * 1 + 0.220855758853 * v1 + 0.163495232892 * v4 + 0.276839042341 * v8 + 0.0266233935665 * v9 + 0.0 * v11 + 0.0 * v12 + 0.0729463910987 * v15 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.16421661226 * v27
def funcL_RELATIONAL_103515(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -6.29737240869e-14 * 1 + 0.155378812169 * v1 + 0.0140724112391 * v4 + 0.00776810220135 * v5 + 0.0 * v6 + 0.0 * v7 + 0.104213135557 * v8 + 0.179461521208 * v15 + 0.262582368157 * v17 + 0.022893448658 * v20 + 0.0 * v21 + 0.144991552689 * v27
def funcL_RELATIONAL_103818(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -8.74175051451e-15 * 1 + 0.0399725206871 * v1 + 0.0 * v4 + 0.0150066753635 * v6 + 0.0 * v8 + 0.444536865205 * v15 + 0.0188067117929 * v17 + 0.0599995376077 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v22 + 0.342879844276 * v27
def funcL_RELATIONAL_104012(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.46149807719e-13 * 1 + 0.187250537169 * v8 + 0.0 * v12 + 0.163978538214 * v13 + 0.00720419925789 * v15 + 0.0441063847236 * v16 + 0.16573662881 * v20 + 0.0675732818852 * v22 + 0.0 * v23 + 0.0 * v24 + 0.210051247346 * v27 + 0.0829525568812 * v28
def funcL_RELATIONAL_104820(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.52738917588e-13 * 1 + 0.219499114724 * v1 + 0.0 * v2 + 0.0 * v4 + 0.154433007031 * v5 + 0.0 * v8 + 0.0 * v13 + 0.0 * v15 + 0.398809565947 * v17 + 0.0 * v20 + 0.13565170217 * v21 + 0.0 * v27
def funcL_RELATIONAL_105014(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 4.7527090442e-14 * 1 + 0.0 * v1 + 0.0 * v4 + 0.0 * v8 + 0.0 * v12 + 0.0824520622896 * v13 + 0.161036656458 * v15 + 0.413884325394 * v17 + -0.0 * v20 + -0.0 * v21 + 0.0 * v22 + 0.243223979469 * v27
def funcL_RELATIONAL_105115(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.02094610537e-13 * 1 + 0.0 * v5 + 0.0667875232711 * v7 + 0.0177339088347 * v8 + 0.216112779662 * v12 + 0.165309512241 * v15 + 0.330001978222 * v17 + 0.076256109827 * v20 + 0.0 * v21 + 0.0 * v22 + 0.0137584595591 * v23 + 0.0 * v28
def funcL_RELATIONAL_105216(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -3.4874503646e-14 * 1 + 0.0 * v2 + 0.0448659058494 * v4 + 0.0 * v5 + 0.308537328709 * v6 + 0.237163901587 * v8 + 0.0 * v12 + 0.100398487728 * v13 + 0.0731611190342 * v15 + 0.106921113768 * v17 + 0.0 * v18 + 0.0646228583573 * v27
def funcL_RELATIONAL_105923(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 6.70987027863e-14 * 1 + 0.0 * v0 + 0.0 * v5 + 0.0415187805093 * v8 + 0.303251003955 * v12 + 0.0662003052644 * v15 + 0.0 * v16 + 0.0796893115068 * v17 + 0.145828865643 * v18 + 0.216522997366 * v20 + 0.0 * v21 + 0.0626005154595 * v28
def funcL_RELATIONAL_106016(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 2.83240539082e-14 * 1 + 0.210600458446 * v4 + 0.0 * v8 + 0.0 * v11 + 0.0 * v13 + 0.209651951635 * v15 + 0.137985158633 * v17 + 0.0271884806435 * v18 + 0.0 * v20 + 0.0 * v21 + 0.290103862256 * v25 + 0.0 * v28
def funcL_RELATIONAL_106319(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.06408239698e-13 * 1 + 0.322590304326 * v1 + 0.0 * v4 + 0.0 * v7 + 0.0 * v8 + 0.0 * v9 + 0.34897157755 * v15 + 0.0768809014921 * v17 + 0.0 * v18 + 0.0 * v23 + 0.169975705833 * v27 + 0.0 * v28
def funcL_RELATIONAL_106521(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.87666620296e-14 * 1 + 0.0 * v1 + 0.0 * v4 + 0.0 * v5 + 0.0152887505172 * v6 + 0.0 * v7 + 0.432283090623 * v8 + 0.0 * v20 + 0.0 * v21 + 0.0 * v25 + 0.234593386024 * v26 + 0.221871736927 * v27
def funcL_RELATIONAL_107321(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.84904804043e-13 * 1 + 0.0 * v3 + 0.0 * v8 + 0.0 * v12 + 0.0616602862188 * v13 + 0.190525104623 * v15 + 0.0 * v16 + 0.617877711089 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v22 + 0.0 * v28
def funcL_RELATIONAL_107422(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -4.94613303175e-14 * 1 + 0.0 * v0 + 0.0 * v1 + 0.0 * v4 + 0.25876096249 * v8 + 0.0 * v12 + 0.19720957831 * v13 + 0.376811066534 * v15 + 0.0 * v16 + 0.0 * v17 + -0.0 * v21 + 0.0 * v28
def funcL_RELATIONAL_108121(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -6.20422347853e-15 * 1 + 0.0763776308766 * v1 + 0.0 * v4 + 0.0 * v5 + 0.00610139871772 * v6 + 0.151866136837 * v8 + 0.0 * v15 + 0.453450949466 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.254092961425 * v27
def funcL_RELATIONAL_108323(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.76077636596e-13 * 1 + 0.226498694322 * v1 + 0.0591670357163 * v5 + 0.0509772983693 * v7 + 0.0 * v8 + 0.0 * v9 + 0.219428836798 * v13 + 0.227025792711 * v17 + 0.0 * v20 + 0.0 * v21 + 0.101365981326 * v23 + 0.030635267715 * v27
def funcL_RELATIONAL_108525(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 8.00753514038e-14 * 1 + 0.288999120605 * v1 + 0.0 * v4 + 0.0590951786901 * v5 + 0.0 * v8 + 0.0 * v9 + 0.106295251586 * v12 + 0.343167106558 * v13 + 0.0 * v20 + 0.0903937302023 * v26 + 0.0482632293135 * v27 + 0.0 * v28
def funcL_RELATIONAL_108828(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -6.58188673901e-14 * 1 + 0.317229409138 * v1 + 0.00628367367851 * v4 + 0.0 * v5 + 0.0996079967217 * v9 + 0.22990898168 * v13 + 0.195284425932 * v15 + 0.0987899066889 * v17 + 0.0 * v20 + 0.0 * v21 + 0.0 * v22 + 0.0 * v27
def funcL_RELATIONAL_109123(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 5.46067165323e-14 * 1 + 0.0 * v1 + 0.0 * v4 + 0.0 * v8 + 0.0 * v9 + 0.0 * v13 + 0.0 * v15 + 0.567213638713 * v17 + 0.0 * v20 + 0.174417920505 * v26 + 0.163640545967 * v27 + 0.0 * v28
def funcL_RELATIONAL_109325(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -7.69226167423e-14 * 1 + 0.0 * v1 + 0.0 * v4 + 0.0 * v5 + 0.23591055808 * v8 + 0.0 * v12 + 0.339408923287 * v13 + 0.0686296395395 * v17 + 0.0 * v21 + 0.0 * v25 + 0.178369231666 * v26 + 0.127817956504 * v27
def funcL_RELATIONAL_110411(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.17474343137e-13 * 1 + 0.0564804701251 * v0 + 0.199828473247 * v1 + 0.0 * v4 + 0.054355536499 * v8 + 0.0974470615919 * v15 + 0.0507138853657 * v16 + 0.427902314554 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v23 + 0.0 * v27
def funcL_RELATIONAL_111312(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.46003381529e-13 * 1 + 0.0 * v3 + 0.0 * v4 + 0.0 * v5 + 0.0 * v8 + 0.0940680465653 * v12 + 0.0241786896907 * v13 + 0.343015478427 * v15 + 0.0 * v16 + 0.262865674787 * v17 + 0.158196632159 * v27 + 0.0 * v28
def funcL_RELATIONAL_111413(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 6.25358330697e-14 * 1 + 0.13828660556 * v1 + 0.0 * v4 + 0.0438564049529 * v5 + 0.210896401241 * v6 + 0.0 * v7 + 0.0 * v11 + 0.0197323212378 * v13 + 0.108047289695 * v14 + 0.207418784918 * v17 + 0.0377132165408 * v25 + 0.229586442425 * v27
def funcL_RELATIONAL_111514(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.37661621227e-13 * 1 + 0.0468805483255 * v1 + 0.0 * v3 + 0.157695530443 * v7 + 0.112837748502 * v8 + 0.0 * v12 + 0.110297839204 * v15 + 0.0 * v16 + 0.101960366732 * v17 + 0.408758788874 * v18 + 0.0 * v21 + 0.0 * v28
def funcL_RELATIONAL_111716(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 2.33929633964e-13 * 1 + 0.253232285543 * v1 + 0.0 * v5 + 0.111692176781 * v7 + 0.0 * v8 + 0.091737079 * v13 + 0.440366047389 * v15 + 0.0 * v17 + 0.0 * v18 + 0.0 * v20 + 0.00572110395038 * v21 + 0.00326267726454 * v27
def funcL_RELATIONAL_113215(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -5.97645532156e-14 * 1 + 0.0 * v1 + -0.0 * v4 + 0.0 * v5 + 0.188454779022 * v7 + 0.0 * v9 + 0.222959336531 * v13 + 0.0 * v15 + 0.224341223635 * v17 + 0.0 * v20 + 0.0 * v25 + 0.226570497055 * v27
def funcL_RELATIONAL_113619(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 2.20734145749e-13 * 1 + 0.0 * v0 + 0.175001843265 * v1 + 0.130205614069 * v6 + 0.0 * v7 + 0.0473816124035 * v9 + 0.218341240478 * v15 + 0.0 * v17 + 0.0 * v18 + -0.0 * v20 + 0.0 * v21 + -0.0 * v23
def funcL_RELATIONAL_113922(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.80361457519e-14 * 1 + 0.0786823964633 * v1 + 0.0 * v3 + 0.201336910426 * v6 + 0.0 * v7 + 0.0 * v8 + 0.102660715137 * v12 + 0.483523749968 * v15 + 0.047583369187 * v17 + 0.0 * v18 + 0.0 * v21 + 0.0 * v23
def funcL_RELATIONAL_114419(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.2021582924e-14 * 1 + 0.0 * v0 + 0.0 * v8 + 0.0122703680194 * v12 + 0.0 * v13 + 0.152722209335 * v15 + 0.391817032448 * v17 + 0.0 * v18 + 0.0 * v23 + 0.0 * v24 + 0.300808164957 * v27 + 0.0 * v28

funcs = [funcL_RELATIONAL_100307,funcL_RELATIONAL_100408,funcL_RELATIONAL_101006,funcL_RELATIONAL_101107,funcL_RELATIONAL_101309,funcL_RELATIONAL_101410,funcL_RELATIONAL_101915,funcL_RELATIONAL_102008,funcL_RELATIONAL_102311,funcL_RELATIONAL_102816,funcL_RELATIONAL_103111,funcL_RELATIONAL_103414,funcL_RELATIONAL_103515,funcL_RELATIONAL_103818,funcL_RELATIONAL_104012,funcL_RELATIONAL_104820,funcL_RELATIONAL_105014,funcL_RELATIONAL_105115,funcL_RELATIONAL_105216,funcL_RELATIONAL_105923,funcL_RELATIONAL_106016,funcL_RELATIONAL_106319,funcL_RELATIONAL_106521,funcL_RELATIONAL_107321,funcL_RELATIONAL_107422,funcL_RELATIONAL_108121,funcL_RELATIONAL_108323,funcL_RELATIONAL_108525,funcL_RELATIONAL_108828,funcL_RELATIONAL_109123,funcL_RELATIONAL_109325,funcL_RELATIONAL_110411,funcL_RELATIONAL_111312,funcL_RELATIONAL_111413,funcL_RELATIONAL_111514,funcL_RELATIONAL_111716,funcL_RELATIONAL_113215,funcL_RELATIONAL_113619,funcL_RELATIONAL_113922,funcL_RELATIONAL_114419,]

def getFuncs(): return funcs
