from math import *

def funcL_RELATIONAL_100307(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.59757039936e-13 * 1 + 0.0 * v0 + 0.131469391865 * v1 + 0.0 * v2 + 0.0 * v3 + 0.0 * v4 + 0.0 * v5 + 0.0 * v7 + 0.216628234038 * v8 + 0.199118824101 * v15 + 0.0 * v16 + 0.324393935032 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v22 + 0.0 * v23 + 0.0105781263223 * v27 + 0.0427132574975 * v28
def funcL_RELATIONAL_100408(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.24865433276e-13 * 1 + 0.0 * v0 + 0.0366818847642 * v1 + -0.0 * v2 + 0.0 * v4 + 0.0 * v5 + 0.0 * v7 + 0.0 * v8 + 0.0 * v12 + 0.206491698112 * v13 + 0.390134268809 * v15 + 0.147684911183 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + -0.0 * v22 + 0.0 * v23 + 0.179659196885 * v27 + 0.0 * v28
def funcL_RELATIONAL_101006(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 4.62040678336e-14 * 1 + 0.0 * v0 + 0.227135183715 * v1 + 0.0 * v4 + 0.0 * v7 + 0.138719418469 * v8 + 0.0 * v10 + 0.0 * v11 + 0.0 * v12 + 0.0510847878851 * v13 + 0.0 * v15 + 0.0 * v16 + 0.25841765741 * v17 + 0.0763153951604 * v18 + -0.256689942011 * v19 + 0.100466912013 * v21 + 0.0 * v24 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_101107(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.61050117827e-14 * 1 + 0.0470101554014 * v1 + 0.0 * v3 + 0.0 * v4 + 0.0 * v7 + 0.0 * v11 + 0.0 * v12 + 0.32169649217 * v13 + 0.0 * v14 + 0.0 * v15 + 0.203230388343 * v17 + 0.0 * v19 + 0.0 * v20 + 0.0992045630406 * v21 + 0.0 * v22 + 0.0 * v24 + 0.0 * v26 + 0.22975843361 * v27 + 0.0 * v28
def funcL_RELATIONAL_101309(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.23138223906e-13 * 1 + 0.0821864296459 * v1 + 0.0 * v2 + -0.0 * v3 + 0.0 * v4 + 0.103349955246 * v6 + -0.0 * v7 + 0.348682991531 * v8 + -0.0 * v9 + 0.160230108487 * v11 + 0.159919173568 * v12 + 0.0 * v15 + 0.0 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v25 + 0.13592547708 * v26 + 0.0 * v27
def funcL_RELATIONAL_101410(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.61140065408e-13 * 1 + 0.0 * v1 + 0.0 * v2 + 0.0249241223424 * v3 + 0.112546522605 * v4 + 0.0 * v5 + 0.0 * v8 + 0.0 * v9 + 0.0 * v12 + 0.0875629837651 * v13 + 0.304317682247 * v15 + -0.0 * v16 + 0.356808374842 * v17 + -0.0 * v20 + -0.0 * v21 + 0.0 * v22 + -0.0 * v23 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_101915(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.81851650371e-13 * 1 + 0.0 * v0 + 0.0 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0479171753972 * v8 + 0.0 * v9 + 0.0 * v10 + 0.0 * v12 + 0.358069034977 * v13 + 0.283353282393 * v15 + 0.296996087175 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v23 + 0.0 * v24 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_102008(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -6.12370438252e-14 * 1 + 0.0 * v0 + 0.0 * v2 + 0.0 * v3 + 0.0 * v5 + 0.133984285391 * v6 + 0.035054661463 * v7 + 0.0 * v8 + 0.0 * v11 + 0.0 * v12 + 0.210615417381 * v13 + 0.0 * v15 + 0.0 * v16 + 0.486642755439 * v17 + 0.0 * v18 + 0.0 * v19 + 0.0 * v21 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_102311(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 3.02605229024e-14 * 1 + 0.0203012940868 * v1 + 0.0 * v2 + 0.058416040896 * v4 + 0.0 * v5 + 0.267007861641 * v6 + 0.0 * v7 + 0.336485946171 * v8 + 0.0 * v9 + 0.0 * v12 + 0.0564887489232 * v13 + 0.0 * v16 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v23 + 0.0 * v25 + 0.0201703933473 * v26 + 0.188866319641 * v27
def funcL_RELATIONAL_102816(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -3.00938255377e-14 * 1 + 0.634038143101 * v1 + 0.0 * v2 + 0.0467561130527 * v4 + 0.0448094628104 * v6 + 0.0 * v7 + 0.0 * v8 + 0.0 * v9 + 0.0179717455849 * v11 + 0.0 * v12 + 0.0 * v14 + 0.0 * v15 + 0.0 * v18 + -0.0 * v19 + 0.0 * v20 + 0.0 * v23 + 0.0 * v25 + 0.0 * v26 + 0.138578473761 * v27
def funcL_RELATIONAL_103111(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -6.94097399941e-14 * 1 + 0.0725475252654 * v1 + 0.0 * v4 + 0.0 * v5 + 0.0 * v7 + 0.0 * v8 + -0.0 * v9 + 0.0 * v11 + -0.0 * v12 + 0.0 * v13 + 0.380429902793 * v15 + 0.242330133186 * v17 + 0.0 * v20 + 0.0 * v21 + 0.0 * v22 + 0.0 * v25 + 0.235455952601 * v26 + 0.0 * v27 + -0.0 * v28
def funcL_RELATIONAL_103414(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 3.0250325552e-14 * 1 + 0.0 * v0 + 0.163878500162 * v1 + 0.1248757458 * v4 + 0.0597467782214 * v6 + 0.275827056543 * v8 + 0.0 * v9 + 0.0 * v10 + 0.0 * v11 + 0.0 * v12 + 0.0 * v13 + 0.110942298349 * v15 + 0.0 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0106753898604 * v21 + 0.0 * v22 + 0.0941914926123 * v26 + 0.113020342351 * v27
def funcL_RELATIONAL_103515(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -5.45671859935e-14 * 1 + 0.108478137791 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0 * v5 + 0.0 * v6 + 0.0 * v7 + 0.106936613624 * v8 + 0.0 * v9 + 0.126177528518 * v11 + 0.0455173074336 * v13 + 0.228063357297 * v15 + 0.178697125472 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0264495034164 * v26 + 0.153607710317 * v27 + 0.0 * v28
def funcL_RELATIONAL_103818(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -8.74444564344e-15 * 1 + 0.0 * v0 + 0.0400069288228 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0150181470345 * v6 + 0.0 * v7 + 0.0 * v8 + 0.0 * v11 + 0.444541835591 * v15 + 0.0187430180341 * v17 + 0.0600022355159 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v22 + 0.0 * v23 + 0.0 * v25 + 0.342894885198 * v27 + 0.0 * v28
def funcL_RELATIONAL_104012(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.69963069385e-13 * 1 + 0.0 * v0 + 0.0336095359674 * v4 + 0.0 * v5 + 0.212106374613 * v8 + 0.0901163017963 * v9 + 0.0 * v11 + 0.0 * v12 + 0.143582819148 * v13 + 0.038928025802 * v15 + 0.0426312792853 * v16 + 0.0 * v18 + 0.13644498423 * v20 + 0.0 * v21 + 0.06961871848 * v22 + 0.0 * v23 + 0.0 * v24 + 0.165253198144 * v27 + 0.0232688445404 * v28
def funcL_RELATIONAL_104820(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.52738917588e-13 * 1 + 0.219499114724 * v1 + 0.0 * v2 + 0.0 * v4 + 0.154433007031 * v5 + 0.0 * v8 + 0.0 * v9 + 0.0 * v10 + -0.0 * v12 + 0.0 * v13 + 0.0 * v15 + 0.398809565947 * v17 + 0.0 * v20 + 0.13565170217 * v21 + 0.0 * v22 + -0.0 * v23 + -0.0 * v24 + 0.0 * v27 + -0.0 * v28
def funcL_RELATIONAL_105014(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 4.75255189956e-14 * 1 + 0.0 * v1 + -0.0 * v2 + 0.0 * v4 + -0.0 * v5 + 0.0 * v8 + -0.0 * v11 + 0.0 * v12 + 0.0824514387478 * v13 + 0.161040433237 * v15 + -0.0 * v16 + 0.413881260909 * v17 + -0.0 * v18 + -0.0 * v20 + -0.0 * v21 + 0.0 * v22 + 0.0 * v25 + 0.243224460239 * v27 + -0.0 * v28
def funcL_RELATIONAL_105115(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -7.17813697443e-14 * 1 + 0.0 * v0 + 0.0 * v2 + 0.0 * v3 + 0.0 * v4 + 0.0 * v5 + 0.0666430927462 * v7 + 0.0 * v8 + 0.112061807545 * v12 + 0.028654416203 * v13 + 0.201801067926 * v15 + 0.138293481992 * v16 + 0.351546526922 * v17 + 0.0 * v18 + 0.00274939220369 * v20 + 0.0 * v21 + 0.0 * v22 + 0.0 * v23 + 0.0 * v28
def funcL_RELATIONAL_105216(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -3.48783151867e-14 * 1 + 0.0 * v1 + 0.0 * v2 + 0.0448609207105 * v4 + 0.0 * v5 + 0.308531366539 * v6 + 0.237154192515 * v8 + 0.0 * v12 + 0.100410800904 * v13 + 0.0731817868132 * v15 + 0.0 * v16 + 0.106912983551 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v22 + 0.0 * v23 + 0.0646192006845 * v27 + 0.0 * v28
def funcL_RELATIONAL_105923(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 7.89985404341e-14 * 1 + 0.0 * v0 + 0.0 * v1 + 0.0 * v4 + 0.0 * v5 + 0.0 * v8 + 0.0 * v9 + 0.0 * v11 + 0.244156277061 * v12 + 0.101541082745 * v13 + 0.183055292179 * v15 + 0.0 * v16 + 0.0796060673588 * v17 + 0.122287783058 * v18 + 0.141985344725 * v20 + 0.0 * v21 + 0.0 * v24 + 0.0605703152148 * v27 + 0.0 * v28
def funcL_RELATIONAL_106016(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 4.07526228952e-14 * 1 + 0.0 * v2 + 0.0 * v3 + 0.162660864926 * v4 + 0.0 * v5 + 0.0 * v7 + 0.0 * v8 + 0.0 * v11 + 0.0 * v13 + 0.178093923067 * v15 + 0.0 * v16 + 0.168665879605 * v17 + 0.0403580952076 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v22 + 0.274160945893 * v25 + 0.0566751673002 * v27 + 0.0 * v28
def funcL_RELATIONAL_106319(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.06641075258e-13 * 1 + 0.00306788637273 * v0 + 0.321802383368 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0 * v6 + 0.0 * v7 + 0.0 * v8 + 0.0 * v9 + 0.0 * v13 + 0.348512046476 * v15 + 0.0738909348902 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v23 + 0.0 * v24 + 0.171737097117 * v27 + 0.0 * v28
def funcL_RELATIONAL_106521(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -3.10183670602e-14 * 1 + 0.0 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0 * v5 + 0.00276633012053 * v6 + 0.0 * v7 + 0.335870089462 * v8 + 0.0 * v11 + 0.0 * v12 + 0.0114771914023 * v13 + 0.119929924266 * v15 + 0.0 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v25 + 0.32683734758 * v26 + 0.133834139845 * v27
def funcL_RELATIONAL_107321(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.84906196542e-13 * 1 + 0.0 * v0 + 0.0 * v1 + 0.0 * v2 + 0.0 * v3 + 0.0 * v4 + 0.0 * v8 + 0.0 * v10 + 0.0 * v12 + 0.0616599665581 * v13 + 0.190515160754 * v15 + 0.0 * v16 + 0.617885569294 * v17 + 0.0 * v18 + 0.0 * v20 + -0.0 * v21 + 0.0 * v22 + 0.0 * v23 + 0.0 * v28
def funcL_RELATIONAL_107422(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -4.94614444765e-14 * 1 + 0.0 * v0 + 0.0 * v1 + -0.0 * v3 + 0.0 * v4 + -0.0 * v7 + 0.258759425061 * v8 + 0.0 * v9 + 0.0 * v12 + 0.197208726687 * v13 + 0.376812933549 * v15 + 0.0 * v16 + 0.0 * v17 + -0.0 * v18 + -0.0 * v20 + -0.0 * v21 + -0.0 * v23 + 0.0 * v24 + 0.0 * v28
def funcL_RELATIONAL_108121(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -9.87137034248e-15 * 1 + 0.0 * v0 + 0.0800070120342 * v1 + 0.0 * v4 + 0.0 * v5 + 0.0093095457049 * v6 + 0.0 * v7 + 0.143313554508 * v8 + 0.0 * v9 + 0.0269982185226 * v13 + 0.0 * v15 + 0.0 * v16 + 0.46397464401 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v23 + 0.225093115859 * v27 + 0.0 * v28
def funcL_RELATIONAL_108323(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -1.52044457484e-13 * 1 + 0.194646410821 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0630158736228 * v5 + 0.0381774442451 * v7 + 0.0 * v8 + 0.0 * v9 + 0.0 * v11 + 0.177617747701 * v13 + 0.0 * v15 + 0.145646094776 * v17 + 0.120998316595 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0494211475689 * v23 + 0.0 * v25 + 0.0711067443725 * v26 + 0.0826310297074 * v27
def funcL_RELATIONAL_108525(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 7.58955211116e-14 * 1 + 0.260816362004 * v1 + 0.0 * v3 + 0.0 * v4 + 0.0285998887767 * v5 + 0.0 * v6 + 0.0 * v8 + 0.0 * v9 + 0.116566838575 * v12 + 0.327608308422 * v13 + 0.0 * v15 + 0.0 * v17 + 0.0 * v20 + 0.0381247024001 * v21 + 0.0 * v22 + 0.0 * v23 + 0.106769453049 * v26 + 0.0619513197044 * v27 + 0.0 * v28
def funcL_RELATIONAL_108828(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -6.58209802896e-14 * 1 + 0.317330944855 * v1 + 0.0063176496756 * v4 + 0.0 * v5 + 0.0 * v6 + 0.0 * v8 + 0.0995247483433 * v9 + 0.0 * v11 + 0.0 * v12 + 0.229982225409 * v13 + -0.0 * v14 + 0.195294772007 * v15 + 0.0986686447042 * v17 + 0.0 * v20 + 0.0 * v21 + 0.0 * v22 + 0.0 * v25 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_109123(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 5.20405286404e-14 * 1 + 0.0 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0321123635654 * v6 + 0.0 * v8 + 0.0 * v9 + 0.0 * v11 + 0.0 * v13 + 0.0 * v14 + 0.0 * v15 + 0.0 * v16 + 0.555045660988 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.156776092654 * v26 + 0.167995049451 * v27 + 0.0 * v28
def funcL_RELATIONAL_109325(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -5.14270091578e-14 * 1 + 0.0 * v1 + 0.0 * v2 + 0.0 * v3 + 0.0 * v4 + 0.0 * v5 + 0.139466656325 * v6 + 0.0898394340122 * v8 + 0.0 * v9 + 0.0 * v12 + 0.380339869151 * v13 + 0.197100897731 * v15 + 0.0168739209927 * v17 + -0.0 * v20 + 0.0 * v21 + 0.0 * v25 + 0.229829231885 * v26 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_110411(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.1837853238e-13 * 1 + 0.0559270440262 * v0 + 0.159317549094 * v1 + 0.0 * v2 + 0.0 * v4 + 0.0526013349178 * v5 + 0.00293055054279 * v6 + 0.000427410686812 * v8 + 0.0 * v11 + 0.0 * v12 + 0.0 * v13 + 0.112266096647 * v15 + 0.0638231235565 * v16 + 0.450347126833 * v17 + 0.0 * v18 + 0.0 * v20 + 0.0 * v21 + 0.0 * v23 + 0.0 * v27
def funcL_RELATIONAL_111312(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.46002307131e-13 * 1 + 0.0 * v2 + 0.0 * v3 + 0.0 * v4 + 0.0 * v5 + 0.0 * v8 + 0.0 * v9 + 0.0 * v11 + 0.0940815103494 * v12 + 0.0241706421537 * v13 + 0.343009754152 * v15 + 0.0 * v16 + 0.26286068814 * v17 + 0.0 * v19 + 0.0 * v20 + 0.0 * v21 + 0.0 * v22 + 0.158203532889 * v27 + 0.0 * v28
def funcL_RELATIONAL_111413(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 6.25345574577e-14 * 1 + 0.138286450103 * v1 + 0.0 * v4 + 0.043852350829 * v5 + 0.210894383711 * v6 + 0.0 * v7 + 0.0 * v8 + -0.0 * v9 + -0.0 * v10 + 0.0 * v11 + 0.0197332102288 * v13 + 0.108048464179 * v14 + 0.0 * v15 + 0.207422563833 * v17 + 0.0 * v18 + 0.0 * v21 + 0.0377154147011 * v25 + 0.0 * v26 + 0.229585065518 * v27
def funcL_RELATIONAL_111514(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.37661568884e-13 * 1 + 0.0468825966739 * v1 + 0.0 * v3 + 0.0 * v5 + 0.0 * v6 + 0.157691677364 * v7 + 0.112838159686 * v8 + 0.0 * v9 + 0.0 * v10 + 0.0 * v12 + 0.110294651842 * v15 + 0.0 * v16 + 0.101958660049 * v17 + 0.408763079826 * v18 + 0.0 * v19 + 0.0 * v20 + 0.0 * v21 + 0.0 * v27 + 0.0 * v28
def funcL_RELATIONAL_111716(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 2.33921035709e-13 * 1 + 0.0 * v0 + 0.25320621321 * v1 + 0.0 * v4 + 0.0 * v5 + 0.111688707274 * v7 + 0.0 * v8 + 0.0 * v9 + -0.0 * v12 + 0.0917494587524 * v13 + 0.440385007511 * v15 + -0.0 * v16 + 0.0 * v17 + 0.0 * v18 + 0.0 * v20 + 0.00572738297748 * v21 + 0.0 * v23 + -0.0 * v24 + 0.00325846210259 * v27
def funcL_RELATIONAL_113215(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -5.97644046432e-14 * 1 + 0.0 * v1 + -0.0 * v4 + 0.0 * v5 + 0.188452728141 * v7 + 0.0 * v8 + 0.0 * v9 + 0.222953863134 * v13 + 0.0 * v15 + 0.224342851861 * v17 + 0.0 * v18 + 0.0 * v19 + 0.0 * v20 + 0.0 * v21 + -0.0 * v22 + 0.0 * v23 + 0.0 * v25 + 0.226573206318 * v27 + 0.0 * v28
def funcL_RELATIONAL_113619(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return 1.6306079447e-13 * 1 + 0.0 * v0 + 0.137066363189 * v1 + -0.0 * v5 + 0.221242866389 * v6 + 0.0 * v7 + 0.0 * v9 + -0.0403386979051 * v11 + 0.193798116724 * v13 + 0.249071142556 * v15 + 0.0 * v17 + 0.0 * v18 + -0.0 * v20 + 0.0 * v21 + -0.0 * v22 + -0.0 * v23 + 0.0 * v24 + 0.0 * v27 + -0.0 * v28
def funcL_RELATIONAL_113922(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.35246942534e-14 * 1 + 0.0 * v0 + 0.0572718604415 * v1 + 0.0 * v2 + 0.0 * v3 + 0.202165577907 * v6 + 0.0 * v7 + 0.0 * v8 + 0.0230693819433 * v9 + 0.0 * v10 + 0.0939734946701 * v12 + 0.498474326565 * v15 + 0.0 * v16 + 0.0422191926579 * v17 + 0.0 * v18 + 0.0 * v19 + 0.0 * v21 + 0.0 * v23 + 0.0 * v24
def funcL_RELATIONAL_114419(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29): return -2.20202310172e-14 * 1 + 0.0 * v0 + 0.0 * v1 + 0.0 * v2 + 0.0 * v3 + 0.0 * v4 + 0.0 * v5 + 0.0 * v8 + 0.0122612670698 * v12 + 0.0 * v13 + 0.152720694671 * v15 + 0.391827668685 * v17 + 0.0 * v18 + 0.0 * v21 + 0.0 * v22 + 0.0 * v23 + 0.0 * v24 + 0.300807970014 * v27 + 0.0 * v28

funcs = [funcL_RELATIONAL_100307,funcL_RELATIONAL_100408,funcL_RELATIONAL_101006,funcL_RELATIONAL_101107,funcL_RELATIONAL_101309,funcL_RELATIONAL_101410,funcL_RELATIONAL_101915,funcL_RELATIONAL_102008,funcL_RELATIONAL_102311,funcL_RELATIONAL_102816,funcL_RELATIONAL_103111,funcL_RELATIONAL_103414,funcL_RELATIONAL_103515,funcL_RELATIONAL_103818,funcL_RELATIONAL_104012,funcL_RELATIONAL_104820,funcL_RELATIONAL_105014,funcL_RELATIONAL_105115,funcL_RELATIONAL_105216,funcL_RELATIONAL_105923,funcL_RELATIONAL_106016,funcL_RELATIONAL_106319,funcL_RELATIONAL_106521,funcL_RELATIONAL_107321,funcL_RELATIONAL_107422,funcL_RELATIONAL_108121,funcL_RELATIONAL_108323,funcL_RELATIONAL_108525,funcL_RELATIONAL_108828,funcL_RELATIONAL_109123,funcL_RELATIONAL_109325,funcL_RELATIONAL_110411,funcL_RELATIONAL_111312,funcL_RELATIONAL_111413,funcL_RELATIONAL_111514,funcL_RELATIONAL_111716,funcL_RELATIONAL_113215,funcL_RELATIONAL_113619,funcL_RELATIONAL_113922,funcL_RELATIONAL_114419,]

def getFuncs(): return funcs
